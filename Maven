build tools--> maven, gradle, ant for java
make c or c++ make for c language
any code written in any languages (c, c++, java , low level or high level languages) first needs to be compiled. 
we cannot execute the code directly, we complue the code to generate binary code which is machine readable code.
compiler requires other dependencies as well as per language
                                            MAVEN
maven is a tool that is used to complie, validate codes and analyse the test cases in the code.
manage the building , reporting and documentation from source control management (SCM)
Maven projects are configures through Project Object Model (POM)
pom.xml file contains documentation for all of the objects properties, methods and events.
heart of maven project->pom.xml file
      MAVEN IS CAPABLE OF"
      information of project is centralized through maven
      our software project is modeled by it
      build process is managed
      data about the software project is gathered and then build itself
      documenting the software and our project
      deployable artifacts can be generated from source code
      your source code is complied, packed test and distributed
      reports is created, website is generate for the project
maven commands avaiable by default--> vrify, complie, test , package, deploy , install etc these commands are called phases and these are for all the maven project
when you it maven complie-->from apache.org it will donwload all the required plugins, repositories, binaries, dependencies based on pom.xml file
to build the maven project--> mvn package
the newly compile and build prject can be tested by using --> java -cp target/my-app-1.0 proj_name.jar com.mycompany.app.App , this command will print the output of the project
maven through terminal--> mvn -version -> to check the version
create a project using maven--> archetype;genereate -DgroupId.com.mycompany.app -Dartifactid=my-app -DarchetypeArtifactid-maven-archety-quickstart -DinteractiveMode=false
             Maven Lifecycle phases: 
Validate: check if the project is correct, having all the necessary information
Compile: compile the source code of the project
test: test the compiled source code using a suitable unit testing framework. these tests should not require the code be packaged or deployed
package: take the compiled code and package it in its distributed format, such as a JAR file
integration-test: process and deploy the package into an environment where integration tests can be run 
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.

1) maven compile--> it will download and keep eveything in cache folder--> everything will be placed in cache in local repo
2) maven test--> it will compile and test the project. in src/test folder will have all the executed test cases. these are defined by the development team.
3) maven package--> installs more plugins and use the plugins to generate a deployable war file in the local repo

      
